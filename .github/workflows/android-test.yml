name: Android Test

on:
  push:
    branches: [ 'feature/**', 'bugfix/**', 'chore/**', 'style/**',
                'refactor/**', 'test/**', 'perf/**', 'ci/**', 'build/**']
  pull_request:
    branches: [ main, release ]

jobs:
  android-test:
    runs-on: ubuntu-latest
    env:
      SEGMENT_DOWNLOAD_TIMEOUT_MINS: 15

    steps:
      - name: Check disk space before build
        run: df -h

      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
        # Documentation: Checks out the repository's code for the workflow to execute
        # See: https://docs.github.com/en/actions/reference/actions#checkout

      # Enable KVM for running Android emulator
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
        # Documentation: Enables Kernel-based Virtual Machine (KVM) for Android emulator acceleration
        # See: https://developer.android.com/studio/run/emulator-acceleration

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
        # Documentation: Sets up JDK 17 for building and testing Java applications
        # See: https://docs.github.com/en/actions/language-and-framework-guides/using-java-with-github-actions

      # Grant execute permission to Gradlew
      - name: Grant Execute Permission to Gradlew
        run: chmod +x ./gradlew
        # Documentation: Grants execute permission to Gradlew script for Gradle build automation
        # See: https://docs.gradle.org/current/userguide/gradle_wrapper.html

      - name: Gradle wrapper setup
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper
        # Documentation: Ensures that the Gradle wrapper is set up correctly
        # See: https://github.com/gradle/gradle-build-action

      # Cache Gradle dependencies
      - name: Gradle Cache
        id: gradle-cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches/modules-2/files-2.1/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        # Documentation: Caches Gradle dependencies and wrapper to speed up subsequent builds
        # See: https://github.com/actions/cache

      # Notify cache status
      - name: Notify Gradle Cache Status (Doesn't Exist)
        if: steps.gradle-cache.outputs.cache-hit != 'true'
        run: echo "Gradle dependencies cache does not exist."

      - name: Notify Gradle Cache Status (Exists)
        if: steps.gradle-cache.outputs.cache-hit == 'true'
        run: echo "Gradle dependencies cache exists."

      # Run Detekt and ktlint checks in parallel
      - name: Run Detekt and ktlint (Parallel)
        run: |
          ./gradlew detekt --parallel &       # Run Detekt in the background
          ./gradlew ktlintCheck --parallel &  # Run ktlint check in the background
          wait                                # Wait for both processes to finish
        # Documentation: Runs Detekt and ktlint checks concurrently to analyze code quality and formatting
        # See: https://detekt.github.io/detekt/
        # See: https://github.com/pinterest/ktlint

      # Upload Detekt Report
      - name: Upload Detekt Report
        uses: actions/upload-artifact@v4
        if: always() # Always upload even if the job fails
        with:
          name: detekt-report
          path: app/build/reports/detekt
        # Documentation: Uploads Detekt reports as artifacts for review
        # See: https://github.com/actions/upload-artifact

      # Upload ktlint Report
      - name: Upload ktlint Report
        uses: actions/upload-artifact@v4
        if: always() # Always upload even if the job fails
        with:
          name: ktlint-report
          path: app/build/reports/ktlint
        # Documentation: Uploads ktlint reports as artifacts for review
        # See: https://github.com/actions/upload-artifact

      # Restore google-services.json file
      - name: Restore google-services.json
        run: |
          echo "${{ secrets.APP_GOOGLE_SERVICES_JSON_B64 }}" | base64 --decode > app/google-services.json
        # Documentation: Restore the google-services.json file needed for the build process

      # Run Unit Tests
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest
        # Documentation: Executes unit tests using Gradle for automated testing
        # See: https://docs.gradle.org/current/userguide/java_testing.html

      # Upload Unit Test Reports
      - name: Upload Unit Test Reports
        uses: actions/upload-artifact@v4
        if: always() # Always upload even if the job fails
        with:
          name: unit-test-reports
          path: app/build/reports/tests/testDebugUnitTest/
        # Documentation: Uploads unit test reports as artifacts for analysis
        # See: https://github.com/actions/upload-artifact

      # Cache AVD (Android Virtual Device)
      - name: AVD Cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-api-29
        # Documentation: Caches Android Virtual Device (AVD) data to optimize emulator startup
        # See: https://developer.android.com/studio/run/managing-avds.html

      # Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        # Documentation: Sets up Android SDK for building and testing Android apps
        # See: https://github.com/android-actions/setup-android

      # Add AVD Manager to PATH
      - name: Add AVD Manager to PATH
        run: echo "/usr/local/lib/android/sdk/tools/bin" >> $GITHUB_PATH
        # Documentation: Adds AVD Manager to PATH for Android emulator management
        # See: https://developer.android.com/studio/command-line/variables.html#path

      - name: Check disk space before emulator start
        run: df -h
        # Documentation: Checks available disk space to ensure sufficient space for the emulator

      # Start emulator and run tests
      - name: Start Emulator and Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedCheck
        # Documentation: Runs instrumented tests on Android emulator
        # See: https://developer.android.com/training/testing/unit-testing/instrumented-unit-testing

      # Kill crashpad_handler processes, to fix the emulator locking issue
      - name: Kill crashpad_handler processes
        if: always()
        run: |
          pkill -SIGTERM crashpad_handler || true
          sleep 5
          pkill -SIGKILL crashpad_handler || true
        # Documentation: Ensures that any crashpad_handler processes are terminated to avoid locking issues
        # See: https://github.com/ReactiveCircus/android-emulator-runner/issues/381
        # and: https://github.com/ReactiveCircus/android-emulator-runner/issues/385

      # Upload Instrumented Test Reports
      - name: Upload Instrumented Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: instrumented-test-reports
          path: app/build/reports/androidTests/connected/debug/
        # Documentation: Uploads instrumented test reports as artifacts for analysis
        # See: https://github.com/actions/upload-artifact

      # Clean up restored google-services.json file regardless of the build status
      - name: Clean up
        run: |
          # Check if the file exists before the shred
          if [ -f app/google-services.json ]; then shred -u app/google-services.json; fi
        if: always() # Ensures cleanup runs even if previous steps fail
        # Documentation: Cleans up restored files to maintain security
