# Copyright 2024 MusTalK (https://github.com/mustalk)
#
# Android Test Workflow
#
# This workflow automates the testing process for Android projects. It is designed to run tests on specific branches and pull requests,
#    ensuring code quality and preventing regressions.
#
# Reasoning and Benefits:
#
# Targeted Execution: Tests are only executed on push events the on `main`, and development branches (following specific naming conventions),
#   as well as on pull requests targeting the `release` branch. This prevents unnecessary test runs on branches that might not require
#   testing, saving resources, and providing a developer-friendly CI process.
#
# Tests are executed only in the following scenarios:
#  - Pushes to the `main` branch.
#  - Pull requests targeting the`release` branch.
#  - Pushes to development branches if there are no open PRs targeting the `release` branch.
#
# Enforced Branch Naming: By specifying branch patterns, the workflow encourages developers to follow consistent naming conventions,
#   leading to a more organized and manageable repository.
#
# Conditional PR Testing: For pull requests from development branches, tests are only run if there is an open pull request targeting
#   the `release` branch. This helps avoid redundant CI runs and ensures that changes are validated against the latest `release`
#   candidate before being merged.
#
# Organized Workflow: Composite actions are used to encapsulate common tasks, improving workflow readability and maintainability.
#   This also enhances the CI run logs by grouping related steps, making it easier to follow the workflow execution, debug issues,
#   and track run times for optimization purposes.
#
# Clear Documentation: Each step includes a descriptive name and comment to explain its purpose, making the workflow easier to understand and maintain.
#
name: Android Test

# Trigger workflow on push to specified branches and pull requests to release
on:
  push:
    branches: [ main, 'feature/**', 'bugfix/**', 'chore/**',
                'refactor/**', 'perf/**', 'build/**', 'test/**',
                'hotfix/**', 'experiment/**']
  pull_request:
    branches: [ release ]

# Grant read permissions to pull requests
permissions:
  contents: write
  pull-requests: read

jobs:
  android-test:
    # Skip Android tests for CI and documentation branches, and for semantic-release promotion commits, as they typically don't include app code changes.
    if: |
      !startsWith(github.head_ref, 'ci/') &&
      !startsWith(github.head_ref, 'docs/') &&
      !startsWith(github.event.head_commit.message, 'chore(release): promote release v')
    runs-on: ubuntu-latest
    env:
      SEGMENT_DOWNLOAD_TIMEOUT_MINS: 15

    steps:
      # Check for open PRs targeting the release branch (only if not on main or release branch)
      - name: Check Open PRs
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/release'
        uses: actions/github-script@v7
        id: check-prs
        with:
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: context.ref,
              base: 'release'
            });
            core.setOutput('has_open_pr', prs.data.length > 0 ? 'true' : 'false');

      # Set test flag based on branch and PR status
      # Runs on main/release, or PRs with open PR to release, or if no open PR has been found
      - name: Set Test Condition
        id: set-test-condition
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" || "${GITHUB_REF}" == "refs/heads/release" ||
                ( "${GITHUB_EVENT_NAME}" == "pull_request" && "${{ steps.check-prs.outputs.has_open_pr }}" == "true" ) ||
                "${{ steps.check-prs.outputs.has_open_pr }}" == "false"
          ]]; then
              echo "RUN_TESTS=true" >>"$GITHUB_ENV"
          else
              echo "RUN_TESTS=false" >>"$GITHUB_ENV"
          fi
        shell: bash

      # Checkout the repository
      - name: Checkout
        if: env.RUN_TESTS == 'true'
        uses: actions/checkout@v4

      # Sets up the required JDK and Gradle environment for the project.
      - name: Setup JDK and Gradle
        if: env.RUN_TESTS == 'true'
        uses: ./.github/actions/setup/gradle-java
        with:
          gradle-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

      # Performs static code analysis using Detekt and Ktlint.
      - name: Code Analysis
        if: env.RUN_TESTS == 'true'
        uses: ./.github/actions/execute/code-analysis

      # Restores the google-services.json file needed for Firebase and other Google services.
      - name: Restore Google Services
        if: env.RUN_TESTS == 'true'
        uses: ./.github/actions/manage/gservices/restore
        with:
          encoded-google-services: ${{ secrets.APP_GOOGLE_SERVICES_JSON_B64 }}

      # Runs unit tests and uploads test reports.
      - name: Execute Unit Tests
        if: env.RUN_TESTS == 'true'
        uses: ./.github/actions/execute/unit-tests

      # Sets up the Android SDK and AVD for running UI tests.
      - name: Setup Android SDK
        if: env.RUN_TESTS == 'true'
        uses: ./.github/actions/setup/avd-sdk

      # Runs UI tests on the configured Android emulator and uploads test reports.
      - name: Execute UI Tests
        if: env.RUN_TESTS == 'true'
        uses: ./.github/actions/execute/ui-tests

      # Cleans up the google-services.json file after tests are complete.
      - name: Cleanup Google Services
        if: env.RUN_TESTS == 'true'
        uses: ./.github/actions/manage/gservices/cleanup
