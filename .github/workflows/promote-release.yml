# Copyright 2024 MusTalK (https://github.com/mustalk)
#
# Promote Release Workflow
#
# This workflow automates the process of merging the release branch into the main branch.
# It performs a rebase and merge operation, ensuring a clean and linear history.
#
# Workflow Trigger:
#   - Push to the 'release' branch.
#
# Jobs:
#   - promote-release:
#     - Performs a rebase and merge of the release branch into the main branch.
#     - Sends a Slack notification about the merge status (success, warning, or failure).
#
# Environment Variables:
#   - ACTIONS_BOT_USERNAME: Username for Slack notifications.
#   - ACTIONS_SLACK_GITHUB_CHANNEL: Slack channel for notifications.
#   - RELEASE_BRANCH: Name of the release branch.
#   - MAIN_BRANCH: Name of the main branch.
#   - REMOTE_NAME: Name of the remote repository.
#   - CHANGELOG_FILE: Path to the changelog file.
#   - GRADLE_FILE: Path to the Gradle file.
#
# Secrets:
#   - ACTIONS_BOT_GITHUB_TOKEN: GitHub token for actions.
#   - BOT_GPG_PKEY: GPG private key for signing commits.
#   - BOT_GPG_PASSPHRASE: Passphrase for the GPG key.
#   - SLACK_GITHUB_WEBHOOK_URL: Slack webhook URL for notifications.
#
# All git operations include GPG signing of commits for authenticity and integrity.
#
name: Promote Release
on:
  pull_request:
    types: [closed]
    branches: [ release ]

permissions:
  contents: write

jobs:
  promote-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      RELEASE_BRANCH: 'release'
      MAIN_BRANCH: 'main'
      REMOTE_NAME: 'origin'
      # Files used in the semantic-release process, excluded from diff checks to prevent false positive warnings
      CHANGELOG_FILE: 'CHANGELOG.md'
      GRADLE_FILE: 'app/build.gradle.kts'

    steps:
      # Checks out the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.ACTIONS_BOT_GITHUB_TOKEN }}

      # Promote the release, execute a rebase & merge release branch into main with GPG signing
      - name: Promote Release (Rebase & Merge)
        id: rebase
        uses: ./.github/actions/execute/promote-release
        with:
          release-branch: ${{ env.RELEASE_BRANCH }}
          main-branch: ${{ env.MAIN_BRANCH }}
          remote-name: ${{ env.REMOTE_NAME }}
          gpg-key: ${{ secrets.BOT_GPG_PKEY }}
          gpg-passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          github-repository: ${{ github.event.repository.name }}
          changelog-file-path: ${{ env.CHANGELOG_FILE }}
          gradle-file-path: ${{ env.GRADLE_FILE }}

      # Send Slack notification
      - name: Send Slack notification (Promote Release)
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_GITHUB_WEBHOOK_URL }}
          SLACK_CHANNEL: ${{ vars.ACTIONS_SLACK_GITHUB_CHANNEL }}
          SLACK_USERNAME: ${{ vars.ACTIONS_BOT_USERNAME }}
          SLACK_TITLE: ${{ env.PROMOTE_RELEASE_STATUS == 'success' && 'Merge Release :white_check_mark:' || env.PROMOTE_RELEASE_STATUS == 'warning' && 'Merge Release :warning:' || 'Merge Release :x:' }}
          SLACK_COLOR: ${{ env.PROMOTE_RELEASE_STATUS == 'success' && 'good' || env.PROMOTE_RELEASE_STATUS == 'warning' && '#FAE52F' || env.PROMOTE_RELEASE_STATUS == 'skipped' && '#6D6D6D' || 'danger' }}
          SLACK_MESSAGE: ${{ env.PROMOTE_RELEASE_STATUS == 'skipped' && 'Promote Release Skipped due to an unexpected error' || env.PROMOTE_RELEASE_MESSAGE }}
          SLACKIFY_MARKDOWN: true
          ENABLE_ESCAPES: true
          SLACK_FOOTER: ''
